traindir <- "~/Google Drive/UVA/Courses/LSM/Fall2021/Data/TrainData/"
sourcedir <-"~/Google Drive/UVA/Courses/LSM/Fall2021/Source/"
source("AccidentInput.R")
setwd(traindir)
G
G
G
G
traindir <- "~/Google Drive/UVA/Courses/LSM/Fall2021/Data/TrainData/"
sourcedir <-"~/Google Drive/UVA/Courses/LSM/Fall2021/Source/"
#load data
setwd(sourcedir)
source("AccidentInput.R")
# you should have two data structures in working memory
# First - a list of data frames for each year of accident data
acts <- file.inputl(traindir)
sapply(acts, dim)
#Load data and combine data from 2001-2020 into totacts
totacts <- combine.data(acts)
# Build a data frame xdmg with only extreme accidents for ACCDMG
dmgbox <-boxplot(totacts$ACCDMG)
ggplot(as.data.frame(totacts$ACCDMG), aes(x=totacts$ACCDMG)) +
geom_boxplot(col= "steelblue") + theme(plot.title = element_text(hjust = 0.5)) + coord_flip()
xdmg <- totacts[totacts$ACCDMG > dmgbox$stats[5],]
## Remove 9/11
xdmg <- xdmg[-185,]
# Remove duplicates from xdmg and call new data frame xdmgnd
xdmgnd <- xdmg[!(duplicated(xdmg[, c("INCDTNO", "YEAR", "MONTH", "DAY", "TIMEHR", "TIMEMIN")])),]
## Reset rownames (observation #s) for sequential numbering-
## otherwise they will remain the #s from totacts
rownames(xdmgnd) <- NULL
#Build linear regression models in R: lm
xdmgnd.lm1<-lm(ACCDMG ~ TEMP + TRNSPD + CARS + HEADEND1,data=xdmgnd)
##Metrics and Variable Selection
##Criterion based assessments
##Adjusted R^2:
summary(xdmgnd.lm1)$adj.r.squared
##AIC:
AIC(xdmgnd.lm1)
##BIC:
AIC(xdmgnd.lm1,k=log(nrow(xdmgnd)))
AIC(xdmgnd.lm1)
AIC(xdmgnd.lm1,k=log(nrow(xdmgnd)))
summary(xdmgnd.lm1)$adj.r.squared
AIC(xdmgnd.lm1)
AIC(xdmgnd.lm1,k=log(nrow(xdmgnd)))
summary(xdmgnd.lm2)$adj.r.squared
xdmgnd.lm2<-lm(ACCDMG ~ TEMP + TRNSPD + CARS, data=xdmgnd)
summary(xdmgnd.lm2)$adj.r.squared
AIC(xdmgnd.lm2)
AIC(xdmgnd.lm2,k=log(nrow(xdmgnd)))
summary(xdmgnd.lm2)$adj.r.squared
AIC(xdmgnd.lm2)
AIC(xdmgnd.lm2,k=log(nrow(xdmgnd)))
summary(xdmgnd.lm2)$adj.r.squared
AIC(xdmgnd.lm2)
AIC(xdmgnd.lm2,k=log(nrow(xdmgnd)))
summary(xdmgnd.lm1)$adj.r.squared
AIC(xdmgnd.lm1)
AIC(xdmgnd.lm1,k=log(nrow(xdmgnd)))
summary(xdmgnd.lm2)$adj.r.squared
AIC(xdmgnd.lm2)
AIC(xdmgnd.lm2,k=log(nrow(xdmgnd)))
xdmgnd.lm1.step<-step(xdmgnd.lm1, trace=T)
summary(xdmgnd.lm1.step)
anova(xdmgnd.lm1,xdmgnd.lm1.step)
anova(xdmgnd.lm1,xdmgnd.lm2)
anova(xdmgnd.lm1,xdmgnd.lm1.step)
source("TestSet.R")
##set test sets size:
test.size<-1/3
setwd(sourcedir)
source("TestSet.R")
##set test sets size:
test.size<-1/3
##generate training sets and test sets from original data:
xdmgnd.data<-test.set(xdmgnd,test.size)
##Build models with training set:
xdmgnd.lm1.train<-lm(ACCDMG~TEMP+TRNSPD+CARS+HEADEND1,data=xdmgnd.data$train)
xdmgnd.lm2.train<-lm(ACCDMG~TEMP+TRNSPD+CARS,data=xdmgnd.data$train)
##Recall that we need to measure predicted MSE.
##First, how to predict with lm models:
xdmgnd.lm1.pred<-predict(xdmgnd.lm1.train,newdata=xdmgnd.data$test)
xdmgnd.lm2.pred<-predict(xdmgnd.lm2.train,newdata=xdmgnd.data$test)
##Next, compute PMSE:
pmse.xdmgnd.lm1<-mse(xdmgnd.lm1.pred,xdmgnd.data$test$ACCDMG)
pmse.xdmgnd.lm2<-mse(xdmgnd.lm2.pred,xdmgnd.data$test$ACCDMG)
pmse.xdmgnd.lm1
pmse.xdmgnd.lm2
pmse.xdmgnd.lm1
pmse.xdmgnd.lm2
# Cross-Validation
##Need the boot library
library(boot)
##You need to use glm (a function to estimate generalized linear model) instead of lm.
##Don't be confused by generalized linear models. Because lm is a special case of glm, glm
##function can be used to estimate lm models as long as you set parameters correctly.
xdmgnd.lm1.cv<-glm(ACCDMG~TEMP+TRNSPD+CARS+HEADEND1,data=xdmgnd)
xdmgnd.lm2.cv<-glm(ACCDMG~TEMP+TRNSPD+CARS,data=xdmgnd)
##Cross-validation error
xdmgnd.lm1.err<-cv.glm(xdmgnd,xdmgnd.lm1.cv,K=10)
xdmgnd.lm2.err<-cv.glm(xdmgnd,xdmgnd.lm2.cv,K=10)
xdmgnd.lm1.err$delta
xdmgnd.lm2.err$delta
# Cross-Validation
##Need the boot library
library(boot)
##You need to use glm (a function to estimate generalized linear model) instead of lm.
##Don't be confused by generalized linear models. Because lm is a special case of glm, glm
##function can be used to estimate lm models as long as you set parameters correctly.
xdmgnd.lm1.cv<-glm(ACCDMG~TEMP+TRNSPD+CARS+HEADEND1,data=xdmgnd)
xdmgnd.lm2.cv<-glm(ACCDMG~TEMP+TRNSPD+CARS,data=xdmgnd)
##Cross-validation error
xdmgnd.lm1.err<-cv.glm(xdmgnd,xdmgnd.lm1.cv,K=10)
xdmgnd.lm2.err<-cv.glm(xdmgnd,xdmgnd.lm2.cv,K=10)
xdmgnd.lm1.err$delta
xdmgnd.lm2.err$delta
xdmgnd.lm1<-lm(ACCDMG ~ TEMP + TRNSPD + CARS + HEADEND1,data=xdmgnd)
xdmgnd.lm2<-lm(ACCDMG ~ TEMP + TRNSPD ,data=xdmgnd)
## Display regression results: ----
summary(xdmgnd.lm1)
summary(xdmgnd.lm2)
xdmgnd$TYPE <- factor(xdmgnd$TYPE, labels = c("Derailment", "HeadOn", "Rearend", "Side", "Raking", "BrokenTrain", "Hwy-Rail", "GradeX", "Obstruction", "Explosive", "Fire","Other","SeeNarrative" ))
##write a model to predict ACCDMG in terms of Type ----
xdmgnd.lm2<-lm(ACCDMG~as.factor(TYPE),data=xdmgnd)
summary(xdmgnd.lm2) #What's the base case?
Derail <- rep(0, nrow(xdmgnd))
Derail[which(xdmgnd$TYPE == "Derailment")] <- 1
Derail <- as.factor(Derail)
contrasts(Derail)
xdmgnd.lm3<-lm(ACCDMG~Derail,data=xdmgnd)
summary(xdmgnd.lm3)
xdmgnd.lm.derail<-lm(ACCDMG~(Derail+ TONS + TRNSPD + CARS + HEADEND1)^2,data=xdmgnd)
summary(xdmgnd.lm.derail)
model<-step(xdmgnd.lm.derail)
summary(model)
anova(xdmgnd.lm1, model)
plot(xdmgnd.lm1,labels.id = NULL, which=4) #Cook's distance
xdmgnd.lm.derail<-lm(ACCDMG~(Derail+ TONS + TRNSPD + CARS + HEADEND1)^2,data=xdmgnd)
summary(xdmgnd.lm.derail)
model<-step(xdmgnd.lm.derail)
summary(model)
coefficients(model)
length(coefficients(model))
gg_diagnose(xdmgnd.lm1)
library(MASS)
library(lindia)
gg_diagnose(xdmgnd.lm1)
plot(xdmgnd.lm1,which=1) #Residual vs. Fitted
plot(xdmgnd.lm1,which=2) #QQ
plot(xdmgnd.lm1,which=3) #Scale-Location
plot(xdmgnd.lm1,labels.id = NULL, which=4) #Cook's distance
plot(xdmgnd.lm1,which=5) #Redisuals vs. Leverage
plot(xdmgnd.lm1,which=6) #Cook's dist vs. Leverage
autoplot(xdmgnd.lm1, which=1)
library(ggfortify)
autoplot(xdmgnd.lm1, which=1)
autoplot(xdmgnd.lm1, which=2)
autoplot(xdmgnd.lm1, which=3)
autoplot(xdmgnd.lm1, which=4)
autoplot(xdmgnd.lm1, which=5)
autoplot(xdmgnd.lm1, which=6)
par(mfrow=c(2,2))
plot(xdmgnd.lm1, labels.id = NULL)
par(mfrow=c(1,1))
# For example, an Mac user
traindir <- "~/Google Drive/UVA/Courses/LSM/Fall2022/Data/TrainData/"
sourcedir <-"~/Google Drive/UVA/Courses/LSM/Fall2022/Source/"
# set the working directory to traindir
setwd(traindir)
#check the current working directory
#it should be same as your traindir directory
getwd()
#***************************
# 1.2 loading all years data
#***************************
# Source AccidentInput
setwd(sourcedir)
source("AccidentInput.R")
# you should have two data structures in working memory
# First - a list of data frames for each year of accident data
acts <- file.inputl(traindir)
# Get a common set the variables
comvar <- intersect(colnames(acts[[1]]), colnames(acts[[8]]))
# the combined data frame
totacts <- combine.data(acts)
# Get dimensions of the combined dataframe
dim(totacts)
# Variable names
names(totacts)
colnames(totacts)
# View the data types
str(totacts)
# Look at the type for TYPE using summary
summary(totacts$TYPE)
#Now, let's put more meaningful labels on TYPE variable
class(totacts$TYPE)
totacts$TYPE <- factor(totacts$TYPE, labels = c("Derailment", "HeadOn", "Rearend", "Side", "Raking", "BrokenTrain", "Hwy-Rail", "GradeX", "Obstruction", "Explosive", "Fire","Other","SeeNarrative" ))
# Use table() to see the frequencies
table(totacts$TYPE)
# Variable names
names(totacts)
colnames(totacts)
# View the data types
str(totacts)
# Look at the type for TYPE using summary
summary(totacts$TYPE)
# For example, an Mac user
traindir <- "~/Google Drive/UVA/Courses/LSM/Fall2022/Data/TrainData/"
sourcedir <-"~/Google Drive/UVA/Courses/LSM/Fall2022/Source/"
# set the working directory to traindir
setwd(traindir)
#check the current working directory
#it should be same as your traindir directory
getwd()
source("AccidentInput.R")
# ***************************
# 1.2 loading all years data
# ***************************
# Source AccidentInput
setwd(sourcedir)
source("AccidentInput.R")
# you should have two data structures in working memory
# First - a list of data frames for each year of accident data
acts <- file.inputl(traindir)
# Get a common set the variables
comvar <- intersect(colnames(acts[[1]]), colnames(acts[[8]]))
# the combined data frame
totacts <- combine.data(acts)
# Get dimensions of the combined dataframe
dim(totacts)
# Variable names
names(totacts)
colnames(totacts)
# View the data types
str(totacts)
# Look at the type for TYPE using summary
summary(totacts$TYPE)
#Now, let's put more meaningful labels on TYPE variable
class(totacts$TYPE)
totacts$TYPE <- factor(totacts$TYPE, labels = c("Derailment", "HeadOn", "Rearend", "Side", "Raking", "BrokenTrain", "Hwy-Rail", "GradeX", "Obstruction", "Explosive", "Fire","Other","SeeNarrative" ))
# Use table() to see the frequencies
table(totacts$TYPE)
# ***************************
# 3.1 bar plot
# ***************************
# Use barplot() to graph this
#stat="bin".
#I change the stat of geom_bar() from count (the default) to identity.
#This lets me map the height of the bars to the raw values of a y variable.
# If you want the heights of the bars to represent values in the data, use stat="identity" and map a value to the y aesthetic."
ggplot(as.data.frame(table(totacts$TYPE)), aes(x = Var1, y= Freq)) +
geom_bar(stat="identity")
# ***************************
# 0.2 installing and loading the library for this session
# ***************************
# First install packages (only needs to be done once), and next load the packages
#install.packages('ggplot2')
library(ggplot2)
#install.packages('dplyr')
library(dplyr)
#install.packages('psych')
library(psych)
#install.packages('lattice')
library(lattice)
# ***************************
# 3.1 bar plot
# ***************************
# Use barplot() to graph this
#stat="bin".
#I change the stat of geom_bar() from count (the default) to identity.
#This lets me map the height of the bars to the raw values of a y variable.
# If you want the heights of the bars to represent values in the data, use stat="identity" and map a value to the y aesthetic."
ggplot(as.data.frame(table(totacts$TYPE)), aes(x = Var1, y= Freq)) +
geom_bar(stat="identity")
# Add color, a title, and change the text size and rotate text
ggplot(as.data.frame(table(totacts$TYPE)), aes(x = Var1, y= Freq)) +
geom_bar(stat="identity",fill= "steelblue")+
ggtitle("Accident Frequency by Type") +
labs(x = "Type of Accident")+
theme(axis.text.x = element_text(size = 8,  angle = 45))
# Looks at TYPEQ
# First convert to numeric, using as.numeric()
totacts$TYPEQ <- as.numeric(totacts$TYPEQ)
# Now convert to factor- use actual categories from data dictionary to be more informative
totacts$TYPEQ <- factor(totacts$TYPEQ, labels = c("Freight", "Passenger", "Commuter", "Work",  "Single", "CutofCars", "Yard", "Light", "Maint"))
# Use barplot() to graph frequencies corresponding to different types of trains
ggplot(as.data.frame(table(totacts$TYPEQ)), aes(x = Var1, y= Freq)) +
geom_bar(stat="identity") +
labs(x = "Type of Consist")+
theme(axis.text.x = element_text(size = 8,  angle = 45))
# Look at CAUSE with summary
# CAUSE: primary cause of incident
summary(totacts$CAUSE)
# Create a new variable called Cause
# that uses labels for cause.
# Add it to totacts.
totacts$Cause <- rep(NA, nrow(totacts))
totacts$Cause[which(substr(totacts$CAUSE, 1, 1) == "M")] <- "M"
totacts$Cause[which(substr(totacts$CAUSE, 1, 1) == "T")] <- "T"
totacts$Cause[which(substr(totacts$CAUSE, 1, 1) == "S")] <- "S"
totacts$Cause[which(substr(totacts$CAUSE, 1, 1) == "H")] <- "H"
totacts$Cause[which(substr(totacts$CAUSE, 1, 1) == "E")] <- "E"
totacts$CAUSE
# use table() and barplot() to see it.
table(totacts$Cause)
# Look at histograms of TEMP with different breaks
# Breaks with gap of 10
ggplot(as.data.frame(totacts$TEMP), aes(x=totacts$TEMP)) +
geom_histogram(breaks=seq(-50, 120, by=10)) +
labs(x = "Temperature", y = "Frequency")
# Breaks with gap of 15
ggplot(as.data.frame(totacts$TEMP), aes(x=totacts$TEMP)) +
geom_histogram(breaks=seq(-50, 120, by=15)) +
labs(x = "Temperature", y = "Frequency")
# Breaks with gap of 30
ggplot(as.data.frame(totacts$TEMP), aes(x=totacts$TEMP)) +
geom_histogram(breaks=seq(-50, 120, by=30)) +
labs(x = "Temperature", y = "Frequency")
# Change the color and title
ggplot(as.data.frame(totacts$TEMP), aes(x=totacts$TEMP)) +
geom_histogram(fill= "steelblue",breaks=seq(-50, 120, by=15)) +
ggtitle("Temperature Frequency") +
labs(x = "Temperature)", y = "Frequency") +
theme(plot.title = element_text(hjust = 0.5))
# Now do the summary for totacts, but remove all narratives
# and any other variables you won't use for this project
cbind(1:ncol(totacts), names(totacts))
totacts %>% select(starts_with("NARR"))
tmp = totacts[,c(122:136)]
new.df <- totacts[,-c(122:136)]
new.df
dim(new.df)
which.max
which.max(totacts$TOTINJ)
tmp["4048"]
tmp[4048]
tmp[4048,]
max(totacts$TOTINJ)
# Scatter plots
df <- data.frame(year=2001:2021,damages=tapply(totacts$ACCDMG, as.factor(totacts$YEAR), sum))
df <- data.frame(year=2001:2021,damages=tapply(totacts$ACCDMG, as.factor(totacts$YEAR), sum))
# Scatter plots
df <- data.frame(year=2001:2020,damages=tapply(totacts$ACCDMG, as.factor(totacts$YEAR), sum))
# Scatter plots
df <- data.frame(year=2001:2020,damages=tapply(totacts$ACCDMG, as.factor(totacts$YEAR), sum))
year=2001:2020
year
damages=tapply(totacts$ACCDMG, as.factor(totacts$YEAR)
)
damages
damages=tapply(totacts$ACCDMG, as.factor(totacts$YEAR), sum)
damages
df <- data.frame(year=2001:2022,damages=tapply(totacts$ACCDMG, as.factor(totacts$YEAR), sum))
ggplot(data=df, aes(x=year, y=damages)) +
geom_line() +
geom_point()
# without panel functions for 2020
pairs(~  TRKDMG + EQPDMG + ACCDMG + TOTINJ + TOTKLD, data = acts[[21]])
# with panel function- a little more detail
pairs.panels(acts[[20]][,c("TRKDMG", "EQPDMG", "ACCDMG", "TOTINJ", "TOTKLD")])
# Do this for all accidents
pairs.panels(totacts[,c("TRKDMG", "EQPDMG", "ACCDMG", "TOTINJ", "TOTKLD")])
# ***************************
# 3.2 Trellis Categorical Plots
# ***************************
# Plotting damage per year
ggplot(data = totacts, aes(x = as.factor(YEAR), y = ACCDMG)) +
geom_boxplot() +
coord_flip() +
scale_fill_grey(start = 0.5, end = 0.8) +
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle("Box Plots of Accident Damage") +
labs(x = "Year", y = "Damage ($)")
# Which accident has the most damage?
which(totacts$ACCDMG == max(totacts$ACCDMG))
totacts %>% filter(ACCDMG == max(ACCDMG))
totacts$ACCDMG[which(totacts$ACCDMG == max(totacts$ACCDMG))]
totacts %>% filter(ACCDMG == max(ACCDMG))
worst_dmg <- totacts %>% filter(ACCDMG == max(ACCDMG))
worst_dmg
# Find out the worst accident for total killed and injured
max_totinj = which(totacts$TOTINJ == max(totacts$TOTINJ))
totacts$TOTINJ[which(totacts$TOTINJ == max(totacts$TOTINJ))]
totacts$TOTINJ[max_totinj]
totacts[max_totinj,]
totacts[max_totinj,122:136]
totacts$ACCDMG[max_totinj]
worst_inj <- totacts %>% filter(TOTINJ == max(TOTINJ))
worst_inj %>% select(TOTINJ)
# What's the narrative of the worst accident for total injured?
worst_inj %>% select(starts_with("NARR"))
worst_inj %>% select(ACCDMG)
# Find the worst accidents in 2018.  What happened?
acts <- totacts %>% filter(YEAR == 18)
acts
acts$YEAR
#damage
totacts$ACCDMG[which(totacts$ACCDMG == max(totacts$ACCDMG[which(totacts$YEAR==18)]))]
acts %>% filter(ACCDMG == max(ACCDMG))
#injury
totacts$TOTINJ[which(totacts$TOTINJ == max(totacts$TOTINJ[which(totacts$YEAR==18)]))]
acts %>% filter(TOTINJ == max(TOTINJ))
#killed
totacts$TOTKLD[which(totacts$TOTKLD == max(totacts$TOTKLD[which(totacts$YEAR==18)]))]
acts %>% filter(TOTKLD == max(TOTKLD))
#Find the accidents with the most injuries in 2018.  What happened in these accidents?
#Explore the news to understand underlying causes and what could have been done to prevent
#these accidents.
acts %>% arrange(desc(TOTINJ)) %>% relocate(TOTINJ) %>% head(5)
which(totacts$TOTINJ > 50 & totacts$YEAR==18)
#Find the accident with the most damage in 2018.  What do you notice about the accidents with the most damage and those with the most injuries?
which(totacts$ACCDMG == max(totacts$ACCDMG[which(totacts$YEAR==18)]))
which(totacts$ACCDMG > 5e6 & totacts$YEAR==18)
acts %>% filter(ACCDMG == max(ACCDMG))
acts %>% arrange(desc(ACCDMG)) %>% relocate(ACCDMG) %>% head(5)
# Plotting accident cause vs. damage
ggplot(data = totacts, aes(x = Cause, y = ACCDMG)) +
geom_boxplot() +
coord_flip() +
scale_fill_grey(start = 0.5, end = 0.8) +
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle("Box Plots of Accident Damage") +
labs(y = "Damage ($)", x = "Accident Cause")
# Plot scaled (log) accident damage
bwplot(Cause~ log(ACCDMG+1), main = "Box Plots of Log(Accident Damage)", xlab = "log(Damage ($))", ylab = "Accident Cause", data = totacts)
# Plot cause vs. scaled (log) accident damage
ggplot(data = totacts, aes(x = Cause, y = log(ACCDMG+1))) +
geom_boxplot() +
coord_flip() +
scale_fill_grey(start = 0.5, end = 0.8) +
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle("Box Plots of Log(Accident Damage)") +
labs(y = "log(Damage ($))", x = "Accident Cause")
# Plot cause vs. no. killed
ggplot(data = totacts, aes(x = Cause, y = TOTKLD)) +
geom_boxplot() +
coord_flip() +
scale_fill_grey(start = 0.5, end = 0.8) +
theme(plot.title = element_text(hjust = 0.5))+
ggtitle("Box Plots of Total Killed")+
labs(y = "Total Killed", x = "Accident Cause")
# Plot cause vs. injured
ggplot(data = totacts, aes(x = Cause, y = TOTINJ)) +
geom_boxplot() +
coord_flip() +
scale_fill_grey(start = 0.5, end = 0.8) +
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle("Box Plots of Total Injured") +
labs(y = "Total Injured", x = "Accident Cause")
# X-Y plots conditioned on cause for both killed and injured
qplot(ACCDMG, TOTKLD, data = totacts) +
facet_wrap(~Cause, scales = "free") +
ggtitle("Damage vs. Killed Conditioned on Cause") +
labs(x =  "Total Accident Damage", y  = "Total Killed") +
theme(plot.title = element_text(hjust = 0.5))
?arrange
?desc
?head
?relocate
acts %>% arrange(desc(ACCDMG))
summary(acts)
?arrange
desc(ACCDMG)
desc(acts$ACCDMG)
?desc
# Find the worst accidents in 2018.  What happened?
acts <- totacts %>% filter(YEAR == 18)
summary(acts)
?filter
filter(ACCDMG == max(ACCDMG))
acts %>% filter(ACCDMG == max(ACCDMG))
dim(acts)
acts %>% filter(ACCDMG == max(ACCDMG))
#Find the accidents with the most injuries in 2018.  What happened in these accidents?
#Explore the news to understand underlying causes and what could have been done to prevent
#these accidents.
acts %>% arrange(desc(TOTINJ)) %>% relocate(TOTINJ) %>% head(5)
